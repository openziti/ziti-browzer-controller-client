/*
Copyright Netfoundry, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*jshint esversion: 6 */
/*global fetch, btoa */

/**
 * {{&title}} - auto-generated from Swagger Spec version {{&version}}
 *
 * @class {{&className}}
 * @param {(string|object)} [domainOrOptions] - The project domain or options object. If object, see the object's optional properties.
 * @param {string} [domainOrOptions.domain] - The project domain
 * @param {object} [domainOrOptions.token] - auth token - object with value property and optional headerOrQueryName and isQuery properties
 */
class {{&className}} {

    constructor(options) {
        let domain = (typeof options === 'object') ? options.domain : options;
        this.domain = domain ? domain : '{{&domain}}';
        if(this.domain.length === 0) {
            throw new Error('Domain parameter must be specified as a string.');
        }
        {{#isSecure}}
            {{#isSecureToken}}
                this.token = (typeof options === 'object') ? (options.token ? options.token : {}) : {};
            {{/isSecureToken}}
            {{#isSecureApiKey}}
                this.apiKey = (typeof options === 'object') ? (options.apiKey ? options.apiKey : {}) : {};
            {{/isSecureApiKey}}
            {{#isSecureBasic}}
                this.basic = (typeof options === 'object') ? (options.basic ? options.basic : {}) : {};
            {{/isSecureBasic}}
        {{/isSecure}}
        this.logger = (typeof options === 'object') ? (options.logger ? options.logger : function() { /* NOP */ }) : function() { /* NOP */ };
        this.token_type = (typeof options === 'object') ? (options.token_type ? options.token_type : null) : null;
        this.access_token = (typeof options === 'object') ? (options.access_token ? options.access_token : null) : null;
    }

    serializeQueryParams(parameters) {
        let str = [];
        for (let p in parameters) {
            if (parameters.hasOwnProperty(p)) {
                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(parameters[p]));
            }
        }
        return str.join('&');
     }

    mergeQueryParams(parameters, queryParameters) {
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters)
                  .forEach(function(parameterName) {
                      {{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} parameter = parameters.$queryParameters[parameterName];
                      queryParameters[parameterName] = parameter;
            });
        }
        return queryParameters;
     }

     /**
      * HTTP Request
      * @method
      * @name {{&className}}#request
      * @param {string} method - http method
      * @param {string} url - url to do request
      * @param {object} parameters
      * @param {object} body - body parameters / object
      * @param {object} headers - header parameters
      * @param {object} queryParameters - querystring parameters
      * @param {object} form - form data object
      * @param {object} deferred - promise object
      */
    request(method, url, parameters, body, headers, queryParameters, form, deferred){
        const queryParams = queryParameters && Object.keys(queryParameters).length ? this.serializeQueryParams(queryParameters) : null ;
        const urlWithParams = url + (queryParams ? '?' + queryParams : '');

        if(body && !Object.keys(body).length) {
            body = undefined;
        }

        this.logger.trace('ZitiBrowzerEdgeClient: doing fetch to: ', urlWithParams);

        /**
         * This code runs in both the Page and the ServiceWorker,
         * so use the proper 'fetch' function depending on environment.
         */
        let fetchFunc = (typeof _ziti_realFetch !== 'undefined') ? _ziti_realFetch : fetch;

        /**
         *  Some web apps (i.e. Jenkins) use Prototype.js, which does some monkey-patching
         *  of certain JS primitives (like Array.toJSON).  The Prototype.js logic serializes
         *  JSON array in a malformed way, which will cause POST body data to be incorrect,
         *  which causes REST calls to teh Controller to fail.  We work around this issue by
         *  taking Prototype.js out of the picture for the duration of our REST call.
         */
        let _toJSON = undefined;
        if (Array.prototype.toJSON) {
            _toJSON = Array.prototype.toJSON;
            delete Array.prototype.toJSON;
        }

        fetchFunc(urlWithParams, {
            method,
            headers,
            body: JSON.stringify(body)
        }).then((response) => {
            return response.json();
        }).then((body) => {
            deferred.resolve(body);
        }).catch((error) => {
            deferred.reject(error);
        });

        /**
         *  Restore Prototype.js monkey-patch that was (potentially) saved above.
         */
        if (_toJSON) {
            Array.prototype.toJSON = _toJSON;
        }
    };

    {{#isSecure}}
        {{#isSecureToken}}
            /**
            * Set Token
            * @method
            * @name {{&className}}#setToken
            * @param {string} value - token's value
            * @param {string} headerOrQueryName - the header or query name to send the token at
            * @param {boolean} isQuery - true if send the token as query param, otherwise, send as header param
            */
            setToken(value, headerOrQueryName, isQuery) {
                this.token.value = value;
                this.token.headerOrQueryName = headerOrQueryName;
                this.token.isQuery = isQuery;
            };
        {{/isSecureToken}}
        {{#isSecureApiKey}}
            /**
            * Set Api Key
            * @method
            * @name {{&className}}#setApiKey
            * @param {string} value - apiKey's value
            * @param {string} headerOrQueryName - the header or query name to send the apiKey at
            * @param {boolean} isQuery - true if send the apiKey as query param, otherwise, send as header param
            */
            setApiKey(value, headerOrQueryName, isQuery) {
                this.apiKey.value = value;
                this.apiKey.headerOrQueryName = headerOrQueryName;
                this.apiKey.isQuery = isQuery;
            };
        {{/isSecureApiKey}}
        {{#isSecureBasic}}
            /**
            * Set Basic Auth
            * @method
            * @name {{&className}}#setBasicAuth
            * @param {string} username
            * @param {string} password
            */
            setBasicAuth(username, password) {
                this.basic.username = value;
                this.basic.password = password;
            };
        {{/isSecureBasic}}
        /**
        * Set Auth headers
        * @method
        * @name {{&className}}#setAuthHeaders
        * @param {object} headerParams - headers object
        */
        setAuthHeaders(headerParams) {
            let headers = headerParams ? headerParams : {};
        {{#isSecureToken}}
            if (!this.token.isQuery) {
                if (this.token.headerOrQueryName) {
                    headers[this.token.headerOrQueryName] = this.token.value;
                } else if (this.token.value) {
                    headers['Authorization'] = 'Bearer ' + this.token.value;
                }
            }
        {{/isSecureToken}}
        {{#isSecureApiKey}}
            if (!this.apiKey.isQuery && this.apiKey.headerOrQueryName) {
                headers[this.apiKey.headerOrQueryName] = this.apiKey.value;
            }
            if ((null !== this.token_type) && (null !== this.access_token)) {
                headers["Authorization"] = [this.token_type + ' ' + this.access_token];
            }
        {{/isSecureApiKey}}
        {{#isSecureBasic}}
            if (this.basic.username && this.basic.password) {
                headers['Authorization'] = 'Basic ' + btoa(this.basic.username + ':' + this.basic.password);
            }
        {{/isSecureBasic}}
            return headers;
        };

        getDeferred() {
            var result = {};
            result.promise = new Promise(function(resolve, reject) {
                result.resolve = resolve;
                result.reject = reject;
            });
            return result;
        };


    {{/isSecure}}

    {{#methods}}
        {{> method}}
    {{/methods}}

}

export {
    {{&className}}
}
